/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graph;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Image;
import java.io.BufferedInputStream;
import java.io.InputStream;
import javax.imageio.ImageIO;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import tool.Constant;
import tool.Variable;
import tool.Tool;

/**
 *
 * @author sandeepk
 */
public class FixedScatterGraph extends javax.swing.JFrame {

    private XYSeriesCollection datasetScatterStraightLineGraph;
    private XYSeries datasetScatterGraph = new XYSeries("");
    int rover_index;
    boolean scatter_with_smooth_line_graph;

    /**
     * Creates new form Graph
     *
     * @param rover_index
     * @param rover
     * @param scatter_with_smooth_line_graph
     */
    public FixedScatterGraph(int rover_index, boolean scatter_with_smooth_line_graph, String rover) {
        initComponents();
        setTitle(" Graph " + rover + " Fixed Data Points");
        try {
            InputStream is = new BufferedInputStream(getClass().getResourceAsStream(
                    "/img/icon.png"));
            Image image = ImageIO.read(is);
            setIconImage(image);
        } catch (Exception e) {
            e.printStackTrace();
        }
        this.rover_index = rover_index;
        this.scatter_with_smooth_line_graph = scatter_with_smooth_line_graph;
        try {
            jPanel_graph.setLayout(new BorderLayout());
            jPanel_graph.removeAll();
            jPanel_graph.repaint();
            jPanel_graph.validate();

            if (scatter_with_smooth_line_graph) {

                jPanel_graph.add(createPaneScatterStraightLineGraph());
            } else {

                jPanel_graph.add(createPaneScatterGraph());
            }

            jPanel_graph.repaint();
            jPanel_graph.validate();
        } catch (Exception e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_graph = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Graph");
        setPreferredSize(new java.awt.Dimension(850, 800));

        jPanel_graph.setPreferredSize(new java.awt.Dimension(850, 800));

        javax.swing.GroupLayout jPanel_graphLayout = new javax.swing.GroupLayout(jPanel_graph);
        jPanel_graph.setLayout(jPanel_graphLayout);
        jPanel_graphLayout.setHorizontalGroup(
            jPanel_graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 850, Short.MAX_VALUE)
        );
        jPanel_graphLayout.setVerticalGroup(
            jPanel_graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_graph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_graph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private ChartPanel createPaneScatterGraph() {
        ChartPanel chartPanel = null;

        double mean_x = 0;
        double mean_y = 0;

        double max_x = 0;
        double max_y = 0;
        double min_x = 0;
        double min_y = 0;

        double delta = 0;
        double d_x = 0;
        double d_y = 0;

        boolean first_value = true;

        int count = 0;

        int index = Variable.graph_data_array_counter[rover_index];
        double x;
        double y;

        for (int i = 0; i < Constant.MAX_GRAPH_DATA_POINT; i++) {

            index--;
            if (index <= -1) {
                index = Constant.MAX_GRAPH_DATA_POINT - 1;
            }
            if (Variable.graph_data_array[rover_index] != null) {

                count++;
                x = Double.parseDouble("" + Variable.graph_data_array[rover_index][index][0]);
                y = Double.parseDouble("" + Variable.graph_data_array[rover_index][index][1]);

                if (first_value) {
                    first_value = false;
                    max_x = x;
                    min_x = x;

                    max_y = y;
                    min_y = y;
                }

                if (max_x < x) {
                    max_x = x;
                }
                if (max_y < y) {
                    max_y = y;
                }

                if (min_x > x) {
                    min_x = x;
                }
                if (min_y > y) {
                    min_y = y;
                }

                mean_x = mean_x + x;
                mean_y = mean_y + y;

                datasetScatterGraph.add(new XYDataItem(x, y));

            }
        }

        mean_x = ((mean_x / count));
        mean_y = ((mean_y / count));

        if ((max_x - mean_x) > (mean_x - min_x)) {
            d_x = Math.abs(max_x - mean_x);
        } else {
            d_x = Math.abs(mean_x - min_x);
        }

        if ((max_y - mean_y) > (mean_y - min_y)) {
            d_y = Math.abs(max_y - mean_y);
        } else {
            d_y = Math.abs(mean_y - min_y);
        }

        if (d_x > d_y) {
            delta = d_x;
        } else {
            delta = d_y;
        }

        delta = delta * 1.1;

        if (delta < 0.005) {
            delta = 0.005;
        }

        XYSeriesCollection xySeriesCollection = new XYSeriesCollection();
        xySeriesCollection.addSeries(datasetScatterGraph);

        JFreeChart jfreechart = ChartFactory.createScatterPlot(
                "", "Lattitude (" + Variable.reporting_unit + ")", "Longitude (" + Variable.reporting_unit + ")", xySeriesCollection,
                PlotOrientation.VERTICAL, true, true, false);
        XYPlot plot = (XYPlot) jfreechart.getPlot();
        XYItemRenderer renderer = plot.getRenderer();

        plot.setBackgroundPaint(Color.white);
        plot.setDomainGridlinePaint(Color.GREEN);
        plot.setRangeGridlinePaint(Color.GREEN);
        plot.getRenderer().setSeriesVisibleInLegend(false);

        plot.setRangePannable(true);
        plot.setDomainPannable(true);

        NumberAxis domain = (NumberAxis) plot.getDomainAxis();
        domain.setRange(Double.parseDouble(Tool.setDecimalDigitsWithoutE("" + (mean_x - delta), 3)), Double.parseDouble(Tool.setDecimalDigitsWithoutE("" + (mean_x + delta), 3)));
//        domain.setTickUnit(new NumberTickUnit(1));
        NumberAxis range = (NumberAxis) plot.getRangeAxis();
        range.setRange(Double.parseDouble(Tool.setDecimalDigitsWithoutE("" + (mean_y - delta), 3)), Double.parseDouble(Tool.setDecimalDigitsWithoutE("" + (mean_y + delta), 3)));
//        range.setTickUnit(new NumberTickUnit(1));

        chartPanel = new ChartPanel(jfreechart);
        chartPanel.setMouseWheelEnabled(true);
        chartPanel.setDomainZoomable(true);
        chartPanel.setRangeZoomable(true);
        return chartPanel;
    }

    private ChartPanel createPaneScatterStraightLineGraph() {

        ChartPanel chartPanel = null;

        double mean_x = 0;
        double mean_y = 0;

        double max_x = 0;
        double max_y = 0;
        double min_x = 0;
        double min_y = 0;

        double delta = 0;
        double d_x = 0;
        double d_y = 0;

        boolean first_value = true;

        int count = 0;

        datasetScatterStraightLineGraph = new XYSeriesCollection();

        XYSeries data = new XYSeries("", false);

        int index = 0;
        try {

            index = Variable.graph_data_array_counter[rover_index];
        } catch (Exception e) {

        }

        double x;
        double y;

        for (int i = 0; i < Constant.MAX_GRAPH_DATA_POINT; i++) {

            index--;

            if (index <= -1) {
                index = Constant.MAX_GRAPH_DATA_POINT - 1;
            }

            if (Variable.graph_data_array[rover_index] != null) {

                count++;

                x = Double.parseDouble("" + Variable.graph_data_array[rover_index][index][0]);
                y = Double.parseDouble("" + Variable.graph_data_array[rover_index][index][1]);

                if (first_value) {
                    first_value = false;
                    max_x = x;
                    min_x = x;

                    max_y = y;
                    min_y = y;
                }

                if (max_x < x) {
                    max_x = x;
                }
                if (max_y < y) {
                    max_y = y;
                }

                if (min_x > x) {
                    min_x = x;
                }
                if (min_y > y) {
                    min_y = y;
                }

                mean_x = mean_x + x;
                mean_y = mean_y + y;

                data.add(x, y);
            }
        }

        mean_x = ((mean_x / count));
        mean_y = ((mean_y / count));

        if ((max_x - mean_x) > (mean_x - min_x)) {
            d_x = Math.abs(max_x - mean_x);
        } else {
            d_x = Math.abs(mean_x - min_x);
        }

        if ((max_y - mean_y) > (mean_y - min_y)) {
            d_y = Math.abs(max_y - mean_y);
        } else {
            d_y = Math.abs(mean_y - min_y);
        }

        if (d_x > d_y) {
            delta = d_x;
        } else {
            delta = d_y;
        }

        delta = delta * 1.1;

        if (delta < 0.005) {
            delta = 0.005;
        }

        datasetScatterStraightLineGraph.addSeries(data);

        JFreeChart chart = ChartFactory.createScatterPlot(
                "", // chart title
                "Lattitude (" + Variable.reporting_unit + ")", // x axis label
                "Longitude (" + Variable.reporting_unit + ")", // y axis label
                datasetScatterStraightLineGraph, // data
                PlotOrientation.VERTICAL,
                true, // include legend
                true, // tooltips
                false // urls
        );

        chart.setBackgroundPaint(Color.white);

        XYPlot plot = (XYPlot) chart.getPlot();
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesLinesVisible(0, true);
        plot.setRenderer(renderer);
        plot.setBackgroundPaint(Color.white);
        plot.setDomainGridlinePaint(Color.GREEN);
        plot.setRangeGridlinePaint(Color.GREEN);
        plot.getRenderer().setSeriesVisibleInLegend(false);

        plot.setRangePannable(true);
        plot.setDomainPannable(true);

        NumberAxis domain = (NumberAxis) plot.getDomainAxis();
        domain.setRange(Double.parseDouble(Tool.setDecimalDigitsWithoutE("" + (mean_x - delta), 3)), Double.parseDouble(Tool.setDecimalDigitsWithoutE("" + (mean_x + delta), 3)));
//        domain.setTickUnit(new NumberTickUnit(1));
        NumberAxis range = (NumberAxis) plot.getRangeAxis();
        range.setRange(Double.parseDouble(Tool.setDecimalDigitsWithoutE("" + (mean_y - delta), 3)), Double.parseDouble(Tool.setDecimalDigitsWithoutE("" + (mean_y + delta), 3)));
//        range.setTickUnit(new NumberTickUnit(1));

        chartPanel = new ChartPanel(chart);

        chartPanel.setMouseWheelEnabled(true);
        chartPanel.setDomainZoomable(true);
        chartPanel.setRangeZoomable(true);

        return chartPanel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel_graph;
    // End of variables declaration//GEN-END:variables
}
